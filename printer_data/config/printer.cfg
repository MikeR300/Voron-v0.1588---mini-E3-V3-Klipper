# This file contains common pin mappings for the BIGTREETECH SKR mini
# E3 v3.0. To use this config, the firmware should be compiled for the
# STM32G0B1 with a "8KiB bootloader" and USB communication.

# The "make flash" command does not work on the SKR mini E3. Instead,
# after running "make", copy the generated "out/klipper.bin" file to a
# file named "firmware.bin" on an SD card and then restart the SKR
# mini E3 with that SD card.

## Voron Design VORON 0.1 SKR Mini E3 V3 config

# *** THINGS TO CHANGE/CHECK: ***
## MCU path                                                                     [mcu] section
## Z and Extruder motor currents                                                [tmc2209 stepper_*] sections. Uncomment the stepper motor you have
## Full steps per rotation for Extruder                                         [extruder] section
## Thermistor types                                                             [extruder] and [heater_bed] sections - See 'sensor types' list at end of file
## Extruder motor currents                                                      [extruder] section
## PID tune                                                                     [extruder] and [heater_bed] sections
## Fine tune E steps                                                            [extruder] section
## For more info                                                                check https://docs.vorondesign.com/build/startup/#v0

[mcu]
serial: /dev/serial/by-id/usb-Klipper_stm32g0b1xx_1F0044000D50345033313820-if00

[pause_resume]

[display_status]

[exclude_object]

[force_move]
enable_force_move: True

[virtual_sdcard]
path: /home/pi/printer_data/gcodes

[save_variables]
filename: /home/pi/printer_data/config/variables.cfg

[gcode_arcs]                         # Enable arcs support (suggested for Orca Slicer)
resolution: 0.1

####################

#[include led_progress.cfg]

#[include calibrate.cfg]

[include Klipper-backup-macro.cfg]

[include led_effects.cfg]

[include aux_fan.cfg]

[include shell_command.cfg]

#[include klicky-bed-mesh-calibrate.cfg]

#[include klicky-probe.cfg]


#[include klicky-variables.cfg]

#[include klicky-macros.cfg]

#[include input_shaping.cfg]


####################

[printer]
kinematics: corexy
max_velocity: 450
max_accel: 10000
minimum_cruise_ratio: 0.5
max_z_velocity: 15
max_z_accel: 100
square_corner_velocity: 5

#####################################################################
#      X/Y Stepper Settings
#####################################################################

[stepper_x]
step_pin: PB13
## Refer to https://docs.vorondesign.com/build/startup/#v0
dir_pin: PB12                                                       # Check motor direction in link above. If inverted, add a ! before PB12
enable_pin: !PB14
rotation_distance: 40
microsteps: 32
full_steps_per_rotation: 200                                        # Set to 400 for 0.9° degree stepper motor, 200 is for 1.8° stepper motors
endstop_pin: ^PC0 
position_endstop: 118
position_max: 119
homing_speed: 40                                                    # Can be increased after initial setup, Max 100
homing_retract_dist: 2
homing_positive_dir: true

[tmc2209 stepper_x]
uart_pin: PC11
tx_pin: PC10
uart_address: 0
interpolate: True
run_current: 0.9
hold_current: 0.45
sense_resistor: 0.110
#stealthchop_threshold: 0                                            # Set to 999999 to turn stealthchop on, and 0 to use spreadcycle

[stepper_y]
step_pin: PB10
## Refer to https://docs.vorondesign.com/build/startup/#v0
dir_pin: PB2                                                        # Check motor direction in link above. If inverted, add a ! before PB2
enable_pin: !PB11
rotation_distance: 40
microsteps: 32
full_steps_per_rotation: 200                                        # Set to 400 for 0.9° degree stepper motor, 200 is for 1.8° stepper motors
endstop_pin: ^PC1
position_endstop: 119
position_max: 119
homing_speed: 50                                                    # Can be increased after initial setup, Max 100
homing_retract_dist: 3
homing_positive_dir: true

[tmc2209 stepper_y]
uart_pin: PC11
tx_pin: PC10
uart_address: 2
interpolate: True
run_current: 0.9
hold_current: 0.45
sense_resistor: 0.110
#stealthchop_threshold: 0                                            # Set to 999999 to turn stealthchop on, and 0 to use spreadcycle

#####################################################################
#   Z Stepper Settings
#####################################################################

[stepper_z]
step_pin: PB0
dir_pin: !PC5                                                       # Remove the ! before PC5 if motor direction is inverted.
enable_pin: !PB1
rotation_distance: 8                                                # For T8x8 integrated lead screw
microsteps: 32
endstop_pin: ^PC2
#position_endstop: -30.5
position_max: 118
position_min: -0.5
homing_speed: 4
second_homing_speed: 1.0
homing_retract_dist: 4.0
homing_positive_dir: false

[tmc2209 stepper_z]
uart_pin: PC11
tx_pin: PC10
uart_address: 1
interpolate: True
## For OMC (StepperOnline) 17LS13-0404E-200G 0.4A 
run_current: 0.4
hold_current: 0.2
## For LDO-42STH25-1004CL200E 1.0A
#run_current: 0.37
sense_resistor: 0.110
stealthchop_threshold: 0                                            # Set to 999999 to turn stealthchop on, and 0 to use spreadcycle


[autotune_tmc stepper_x]
motor: toa-35hsh7402-24b-400
tuning_goal: auto
extra_hysteresis: 2

[autotune_tmc stepper_y]
motor: toa-35hsh7402-24b-400
tuning_goal: auto
extra_hysteresis: 2

[autotune_tmc stepper_z]
motor: fysetc-42hsc1404b-200n8
tuning_goal: auto

[autotune_tmc extruder]
motor: fysetc-g36hsy4407-6d-1200a
tuning_goal: auto


#####################################################################
#   Extruder
#####################################################################

[extruder]
step_pin: PB3
dir_pin: PB4                                                        # Add ! if moving opposite direction
enable_pin: !PD1
#full_steps_per_rotation: 200                                       # Set to 200 for LDO 1.8° stepper motor, and set to 400 for OMC(StepperOnline) 0.9° stepper motor
rotation_distance: 22.6789511                                            # See calibrating rotation_distance on extruders doc
gear_ratio: 50:10                                                   # For Mini Afterburner
microsteps: 32
nozzle_diameter: 0.400
filament_diameter: 1.750
heater_pin: PC8
sensor_type: ATC Semitec 104GT-2                                 # Adjust for your hotend thermistor. See 'sensor types' list at end of file
sensor_pin: PA0
#control: pid                                                        # Do PID calibration after initial checks
#pid_Kp: 28.182
#pid_Ki: 1.978
#pid_Kd: 100.397
min_temp: 10
max_temp: 300
min_extrude_temp: 170
max_extrude_only_distance: 101
max_extrude_cross_section: 20
pressure_advance: 0.068                                               # See tuning pressure advance doc
pressure_advance_smooth_time: 0.040

[tmc2209 extruder]
uart_pin: PC11
tx_pin: PC10
uart_address: 3
interpolate: True
## For OMC (StepperOnline) 14HR07-1004VRN 1A 0.9°
#run_current: 0.5	# for OMC 14HR07-1004VRN rated at 1A
## For LDO LDO 36STH17-1004AHG 1A 1.8° 
run_current: 0.6	# for LDO 36STH17-1004AHG
hold_current: 0.30
sense_resistor: 0.110
stealthchop_threshold: 0                                            # Set to 0 for spreadcycle, avoid using stealthchop on extruder

#####################################################################
#   Bed Heater
#####################################################################

[heater_bed]
heater_pin: PC9
sensor_type: NTC 100K MGB18-104F39050L32                            # For Keenovo, verify yours
sensor_pin: PC4
smooth_time: 3.0
#max_power: 0.6                                                     # Only needed for 100w pads
min_temp: 0
max_temp: 123
#control: pid                                                        # Do PID calibration after initial checks
#pid_kp: 68.453
#pid_ki: 2.749
#pid_kd: 426.122

#####################################################################
#	Thermistor definitions
#####################################################################

[thermistor Trianglelab NTC100K B3950]
## values calibrated against a PT100 reference
temperature1: 25.0
resistance1: 103180.0
temperature2: 150.0
resistance2: 1366.2
temperature3: 250.0
resistance3: 168.6

#####################################################################
#	Fan Control
#####################################################################

[heater_fan hotend_fan]
pin: PC7
max_power: 1
kick_start_time: 0
heater: extruder
heater_temp: 50
#fan_speed: 1.0	                                                    # You can't PWM the delta fan unless using blue wire

[fan]
pin: PC6
max_power: 1.0
kick_start_time: 4                                            # Depending on your fan, you may need to increase this value if your fan will not start
off_below: 0.13
cycle_time:0.010

#[controller_fan controller_fan]
#pin: PA15
#max_power: 1.0
#kick_start_time: 0
#stepper: stepper_x, stepper_y, stepper_z, extruder
#heater: extruder 

#####################################################################
#	Homing and Gantry Adjustment Routines
#####################################################################

[idle_timeout]
timeout: 1800

[temperature_sensor raspberry_pi]
sensor_type: temperature_host
min_temp: 10
max_temp: 100

[temperature_sensor mcu_temp]
sensor_type: temperature_mcu
min_temp: 0
max_temp: 100

[temperature_sensor chamber]
sensor_type: Trianglelab NTC100K B3950
sensor_pin: PA7
inline_resistor: 0
pullup_resistor: 10000

[safe_z_home]
home_xy_position: 117,118
speed: 65.0
z_hop: 1

#[probe]
#pin: ^PC14
#x_offset: 9.5 #(9.5 with front cowling)
##y_offset: 0
##z_offset: 14.5
#speed: 3
#lift_speed: 5

#samples: 2
#samples_result: median
#sample_retract_dist: 1.5

#samples_tolerance: 0.01
#samples_tolerance_retries: 10

###[axis_twist_compensation]
##speed: 50
#horizontal_move_z: 40
#calibrate_start_x: 10
#calibrate_end_x: 110
#calibrate_y: 60

## To be used with BED_SCREWS_ADJUST
[bed_screws]
screw1: 5,110
screw1_name: back left
screw2: 105,105
screw2_name: back right
screw3: 58,5
screw3_name: front screw


#[bed_mesh]
#mesh_min: 20,30
#mesh_max: 100,100
#speed: 200
#horizontal_move_z: 20 

#probe_count: 4,4					#if you would like more detail, use 5,5 here
#zero_reference_position: 60,60		 #if you use 5,5 above, place 12 here
#move_check_distance: 3
##adaptive_margin: 5

#algorithm: bicubic
#bicubic_tension: 0.5
#fade_start: 1
#fade_end: 20
#fade_target: 0
#split_delta_z: 0.0125
#mesh_pps: 1,1



#[screws_tilt_adjust]
#screw1: 0,115            #For Long probe
#screw1_name: back left
#screw2: 100,115          #For Long probe
#screw2_name: back right
#screw3: 49,5             #For Long probe
#screw3_name: front screw
#horizontal_move_z: 20
#speed: 100
#screw_thread: CW-M3

[neopixel lights]
pin: PA8
color_order: GRB
chain_count: 10

#####################################################################
#	Input shaper
#####################################################################

[input_shaper]
##  A frequency (in Hz) of the input shaper for X or Y axis. 
shaper_freq_x: 76.2
shaper_freq_y: 73.8
##  A type of the intput shaper for X or Y axia.
shaper_type_x: mzv
shaper_type_y: mzv
##  Damping ratios of vibrations of X and Y axes used by input shapers
##  to improve vibration suppression. Default value is 0.1 which is a
##  good all-round value for most printers. In most circumstances this
##  parameter requires no tuning and should not be changed.
damping_ratio_x: 0.071
damping_ratio_y: 0.076

#####################################################################
#	Macros
#####################################################################


[gcode_macro _CG28]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
    G28
    {% endif %}
    
[gcode_macro MOVE_STEPPERS]
gcode:
    M18
    SET_KINEMATIC_POSITION
    

[gcode_macro M486]
gcode:
    # Parameters known to M486 are as follows:
    #   [C<flag>] Cancel the current object
    #   [P<index>] Cancel the object with the given index
    #   [S<index>] Set the index of the current object.
    #       If the object with the given index has been canceled, this will cause
    #       the firmware to skip to the next object. The value -1 is used to
    #       indicate something that isn’t an object and shouldn’t be skipped.
    #   [T<count>] Reset the state and set the number of objects
    #   [U<index>] Un-cancel the object with the given index. This command will be
    #       ignored if the object has already been skipped
    
    {% if 'exclude_object' not in printer %}
    {action_raise_error("[exclude_object] is not enabled")}
    {% endif %}
    
    {% if 'T' in params %}
    EXCLUDE_OBJECT RESET=1
    
    {% for i in range(params.T | int) %}
    EXCLUDE_OBJECT_DEFINE NAME={i}
    {% endfor %}
    {% endif %}
    
    {% if 'C' in params %}
    EXCLUDE_OBJECT CURRENT=1
    {% endif %}
    
    {% if 'P' in params %}
    EXCLUDE_OBJECT NAME={params.P}
    {% endif %}
    
    {% if 'S' in params %}
    {% if params.S == '-1' %}
    {% if printer.exclude_object.current_object %}
    EXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}
    {% endif %}
    {% else %}
    EXCLUDE_OBJECT_START NAME={params.S}
    {% endif %}
    {% endif %}
    
    {% if 'U' in params %}
    EXCLUDE_OBJECT RESET=1 NAME={params.U}
    {% endif %}
    
[gcode_macro START_PRINT]
gcode:
  DIM
  WHITE
  # Fetches data from your slicer. Such as bed temp, extruder temp, chamber temp and size of your printer.
  {% set target_bed = params.BED_TEMP|int %}
  {% set target_extruder = params.EXTRUDER_TEMP|int %}
  {% set target_chamber = params.CHAMBER|default("40")|int %}
  {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
  {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}

  # Homes the printer and sets absolute positioning
  G28                                                 # Full home (XYZ)
  G90                                                 # Absolute position
  DIM                                                 
  # Checks if the bed temp is higher than 90c - if so then trigger a heatsoak
  {% if params.BED_TEMP|int > 90 %}
    M106 S250                                         # Turn on the PT-fan

    ##  Uncomment if you have a Nevermore.
    #SET_PIN PIN=nevermore VALUE=1                    # Turn on the nevermore

    G1 X{x_wait} Y{y_wait} Z15 F9000                  # Go to center of the bed
    M190 S{target_bed}                                # Set target temp for the bed
    TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}   # Wait for chamber temp

  # If the bed temp is not over 90c it skips the heatsoak and just heats up to set temp with a 1 min soak.
  {% else %}
    G1 X{x_wait} Y{y_wait} Z15 F9000                  # Go to center of the bed
    M190 S{target_bed}                                # Set target temp for the bed
    G4 P100000                                        # Wait 1 min for the bedtemp to stabilize
  {% endif %}
  # Heats up the hotend up to target via slicer
  M107                                                # Turn off partcooling fan
  M109 S{target_extruder}                             # Heat hotend to print temp 
  G28
  G1 Z5 F9000
  WHITE  
  VORON_PURGE
    
  
[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
    TURN_OFF_HEATERS
    CANCEL_PRINT_BASE
    error
    
    G92 E0                         ; zero the extruder
    G1 E-5.0 F3600                 ; retract filament
    M84
    M107
    G91
    
    
[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customize for your slicer of choice
gcode:
    finished
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-5.0 F3600                 ; retract filament
    G91                            ; relative positioning
    
    
    
    #   Get Boundaries
    {% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
    {% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
    {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}
    
    #   Check end position to determine safe direction to move
    {% if printer.toolhead.position.x < (max_x - 20) %}
    {% set x_safe = 20.0 %}
    {% else %}
    {% set x_safe = -20.0 %}
    {% endif %}
    
    {% if printer.toolhead.position.y < (max_y - 20) %}
    {% set y_safe = 20.0 %}
    {% else %}
    {% set y_safe = -20.0 %}
    {% endif %}
    
    {% if printer.toolhead.position.z < (max_z - 2) %}
    {% set z_safe = 2.0 %}
    {% else %}
    {% set z_safe = max_z - printer.toolhead.position.z %}
    {% endif %}
    
    G0 Z{z_safe} F3600             ; move nozzle up
    G0 X{x_safe} Y{y_safe} F20000  ; move nozzle to remove stringing
    TURN_OFF_HEATERS
    M107                           ; turn off fan
    G90                            ; absolute positioning
    G0 X115 Y{max_y} F3600          ; park nozzle at rear
    M84
    idle
      
    
    
[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    chase
    # Parameters
    {% set z = params.Z|default(10)|int %}                                                   ; z hop amount
    
    {% if printer['pause_resume'].is_paused|int == 0 %}
    SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
    SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro
    
    #SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0                                  ; disable filament sensor
    SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume
    BASE_PAUSE                                                                           ; pause print
    {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
    G91                                                                              ; relative positioning
    G1 Z{z} F900                                                                     ; raise Z up by z hop amount
    {% else %}
    { action_respond_info("Pause zhop exceeds maximum Z height.") }                  ; if z max is exceeded, show message and set zhop value for resume to 0
    SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
    {% endif %}
    G90                                                                                  ; absolute positioning
    G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y} F6000   ; park toolhead at front center
    SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error)
    SET_IDLE_TIMEOUT TIMEOUT=43200                                                       ; set timeout to 12 hours
    {% endif %}
    
    
[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 210
gcode:
    # Parameters
    {% set e = params.E|default(4)|int %}                                          ; hotend prime amount (in mm)
    
    {% if printer['pause_resume'].is_paused|int == 1 %}
    SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1                          ; enable filament sensor
    WHITE                                                                   ; reset LCD color
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  ; set timeout back to configured value
    {% if etemp > 0 %}
    M109 S{etemp|int}                                                        ; wait for hotend to heat back up
    {% endif %}
    RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                     ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)
    G91                                                                          ; relative positioning
    M83                                                                          ; relative extruder positioning
    {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
    G1 Z{zhop * -1} E{e} F900                                                ; prime nozzle by E, lower Z back down
    {% else %}
    G1 Z{zhop * -1} F900                                                     ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
    {% endif %}
    RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=200                          ; restore position
    BASE_RESUME                                                                  ; resume print
    {% endif %}


[gcode_macro LOAD_FILAMENT]
gcode:
    loading
    _CG28
    M109 S200
    G0 Z30 F3600
    G0 X90 Y5 F4000
    M83
    G1 E10 F200
    G1 E40 F2000                    ; load
    G1 E30 F300
    G1 E-4 F2000
    M82                            ; set extruder to absolute
    
        
[gcode_macro UNLOAD_FILAMENT]
gcode:
    M83                            ; set extruder to relative
    G1 E10 F2000
    G1 E-20 F5000
    G1 E-25 F300
    G1 E-35 F1000
    M82                            ; set extruder to absolute
    
    
[gcode_macro RETRACT]
gcode:
    M83                            ; set extruder to relative
    G1 E-5 F3000
    
[gcode_macro M600]
gcode:
    {% set Z = params.Z|default(10)|float %}
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE
    G91
    G1 E-1 F2700
    G1 Z{Z}
    UNLOAD_FILAMENT
    RESTORE_GCODE_STATE NAME=M600_state
    progress


[gcode_macro VORON_PURGE]
description: A purge macro that adapts to be near your actual printed objects

variable_adaptive_enable: False      # Change to False if you'd like the purge to be in the same spot every print
variable_z_height: 0.3              # Height above the bed to purge
variable_tip_distance: 6           # Distance between filament tip and nozzle before purge (this will require some tuning)
variable_purge_amount: 32           # Amount of filament to purge
variable_flow_rate: 9              # Desired flow rate in mm3/s
variable_x_default: 1              # X location to purge, overwritten if adaptive is True
variable_y_default: 1              # Y location to purge, overwritten if adaptive is True
variable_size: 7                   # Size of the logo
variable_distance_to_object_x: 2   # Distance in x to the print area
variable_distance_to_object_y: 2   # Distance in y to the print area

### This section is for those who are using Moonraker's Update Manager for KAMP, or want a more verbose macro. ###

variable_display_parameters: False   # Display macro paramters in the console, useful for debugging the SETUP_VORON_PURGE call, or more verbosity.

gcode:
    
    {% if display_parameters == True %}
    { action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }
    { action_respond_info("z_height        : %f" % (z_height))  }
    { action_respond_info("tip_distance    : %f" % (tip_distance))  }
    { action_respond_info("purge_amount    : %f" % (purge_amount))  }
    { action_respond_info("flow_rate       : %f" % (flow_rate))  }
    { action_respond_info("x_default       : %f" % (x_default))  }
    { action_respond_info("y_default       : %f" % (y_default))  }
    { action_respond_info("size            : %f" % (size))  }
    { action_respond_info("distance_to_object_x : %f" % (distance_to_object_x))  }
    { action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }
    {% endif %}
    
    {% if adaptive_enable == True %}
    {% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
    {% set x_origin = (all_points | map(attribute=0) | min | default(x_default + distance_to_object_x + size)) - distance_to_object_x - size %}
    {% set y_origin = (all_points | map(attribute=1) | min | default(y_default + distance_to_object_y + size)) - distance_to_object_y - size %}
    {% set x_origin = ([x_origin, 0] | max) %}
    {% set y_origin = ([y_origin, 0] | max) %}
    {% else %}
    {% set x_origin = x_default | float %}
    {% set y_origin = y_default | float %}
    {% endif %}
    {% set purge_move_speed = 2.31 * size * flow_rate / (purge_amount * 2.405) %}
    {% set prepurge_speed = flow_rate / 2.405 %}
    {% set travel_speed = printer.toolhead.max_velocity %}
    { action_respond_info( "x: " + x_origin|string + " y: " + y_origin|string + " purge_move_speed: " + purge_move_speed|string + " prepurge_speed: " + prepurge_speed|string ) }
    
    
    
    
    G92 E0                                                                              # Reset extruder
    G0 F{travel_speed*10}                                                               # Set travel speed
    G90                                                                                 # Absolute positioning
    G0 X{x_origin} Y{y_origin+size/2}                                                   # Move to purge position
    G0 Z{z_height}                                                                      # Move to purge Z height
    M83                                                                                 # Relative extrusion mode
    G1 E{tip_distance} F{prepurge_speed*60}                                             # Move tip of filament to nozzle
    G1 X{x_origin+size*0.289} Y{y_origin+size} E{purge_amount/4} F{purge_move_speed*60} # Purge first line of logo
    G1 E-.5 F2100                                                                       # Retract
    G0 Z{z_height*2}                                                                    # Z hop
    G0 X{x_origin+size*0.789} Y{y_origin+size}                                          # Move to second purge line origin
    G0 Z{z_height}                                                                      # Move to purge Z height
    G1 E.5 F2100                                                                        # Recover
    G1 X{x_origin+size*0.211} Y{y_origin} E{purge_amount/2} F{purge_move_speed*60}      # Purge second line of logo
    G1 E-.5 F2100                                                                       # Retract
    G0 Z{z_height*2}                                                                    # Z hop
    G0 X{x_origin+size*0.711} Y{y_origin}                                               # Move to third purge line origin
    G0 Z{z_height}                                                                      # Move to purge Z height
    G1 E.5 F2100                                                                        # Recover
    G1 X{x_origin+size} Y{y_origin+size/2}  E{purge_amount/4} F{purge_move_speed*60}    # Purge third line of logo
    G1 E-.5 F2100                                                                       # Retract
    G92 E0                                                                              # Reset extruder distance
    M82                                                                                 # Absolute extrusion mode
    G0 Z{z_height*2}                                                                    # Z hop
    
[gcode_macro SETUP_VORON_PURGE]
gcode:
    SET_GCODE_VARIABLE MACRO=VORON_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}
    SET_GCODE_VARIABLE MACRO=VORON_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}
    SET_GCODE_VARIABLE MACRO=VORON_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}
    SET_GCODE_VARIABLE MACRO=VORON_PURGE  VARIABLE=tip_distance  VALUE={params.TIP_DISTANCE|default(10)|float}
    SET_GCODE_VARIABLE MACRO=VORON_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}
    SET_GCODE_VARIABLE MACRO=VORON_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(10)|float}
    SET_GCODE_VARIABLE MACRO=VORON_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}
    SET_GCODE_VARIABLE MACRO=VORON_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}
    SET_GCODE_VARIABLE MACRO=VORON_PURGE  VARIABLE=size          VALUE={params.SIZE|default(10)|float}
    SET_GCODE_VARIABLE MACRO=VORON_PURGE  VARIABLE=distance_to_object_x     VALUE={params.DISTANCE_TO_OBJECT_X|default(10)|float}
    SET_GCODE_VARIABLE MACRO=VORON_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}

[gcode_macro PURGE_BLOB]
gcode:
    SAVE_GCODE_STATE NAME=PRIME_NOZZLE_STATE
    # FROM: https://gist.github.com/brandon3055/f5297f191fa576d2228e700ac6857abc
    # In order to use this you need to increase max_extrude_cross_section in your extruder config or klipper will complain. I set mine to 30
    {% set BEDWIDTH = printer.toolhead.axis_maximum.x|int %}

    # Set the width of your flexplate handle here
    {% set FLEXPLATE_HANDLE_WIDTH = 80|int %}
    # And if your flexplate is not centered, you can adjust that here
    {% set FLEXPLATE_HANDLE_LEFT_X = 0.5 * BEDWIDTH - 0.5 * FLEXPLATE_HANDLE_WIDTH %}

    {% set FLEXPLATE_HANDLE_CENTER_X = FLEXPLATE_HANDLE_LEFT_X + 0.5 * FLEXPLATE_HANDLE_WIDTH%}
    {% set PURGE_X_LOC = (FLEXPLATE_HANDLE_LEFT_X + ( printer.system_stats.cputime * 1000 ) % FLEXPLATE_HANDLE_WIDTH) %}           ; Generate pseudo random start pos so we dont wear out that one spot on the bed. 
    {% set PURGE_TRAVEL_DIR = (1 if PURGE_X_LOC < FLEXPLATE_HANDLE_CENTER_X else -1) %}

    RESPOND TYPE=echo MSG="Bed width        W={BEDWIDTH}mm"
    RESPOND TYPE=echo MSG="FlexPlate handle W={FLEXPLATE_HANDLE_WIDTH}mm starting @X={FLEXPLATE_HANDLE_LEFT_X}mm"
    RESPOND TYPE=echo MSG="Using purge loc  X={PURGE_X_LOC}mm, Traveling { 'LEFT' if PURGE_TRAVEL_DIR > 0 else 'RIGHT' }"

    M117 Purging at X{ PURGE_X_LOC }                                                       
    
    # The start pos will be within the "handle" of the flex plate where there is some extra Y space available so we can go all the way to Y0
    # If your setup does not have this extra space then just increase the y valie in the line "G1 X{ PURGE_X_LOC } Y0 Z1 F18000"
    G92 E0                          ; zero the extruder
    G90                             ; absolute positioning
    G1 X{ PURGE_X_LOC } Y2 Z1 F10000   ; Go to start pos for perge line
    G1 Z0.4 F600                    ; Lower to purge height
    G91                             ; relative positioning
    G1 X5 E40 F40                   ; Extrude blob of filament on the bed
    M106 P0                         ; Enable Cooling Fan
    G1 X20 Z5 F100                  ; Slow drag away from the blob with fans helping cool and break strings. Also raiz z zo the blob clears the fan duct
    G1 X{ 5*PURGE_TRAVEL_DIR }  Z-5.1 F9000              ; Now that the blob has cleared the duct we go back down for a short 0.3mm height extrusion
    G1 X{ 5*PURGE_TRAVEL_DIR } E2 F180                   ; Slow 5mm extrude move to help with stringing
    G1 X{ 30*PURGE_TRAVEL_DIR} E-1 F6000                ; Fast move and retract to break strings and reduce ooze
    G1 Z1 F100                      ; Lift
    M106 P0 S0                      ; Disable Cooling Fan
    G92 E0                          ; zero the extruder
    G90                             ; absolute positioning

    RESTORE_GCODE_STATE NAME=PRIME_NOZZLE_STATE


[gcode_macro HEAT_SOAK]
description: heats the bed for a while

variable_target_temp: 0
variable_stage: None ## heating -> soaking -> done -> None

## in seconds
variable_check_interval: 10
variable_soak_time_remaining: 0
variable_total_time_elapsed: 0

gcode:
    heat_soak_led
    {% set TARGET = params.TARGET | default(115) | float %}
    {% set DURATION = (params.DURATION | default(25) | int) * 60 %} ## minutes to seconds

    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=target_temp         VALUE={ TARGET }
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage               VALUE="'heating'"
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE={ DURATION }
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed  VALUE=0

    ;; fire up the heater
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={ TARGET }

    ;; run the fan to circulate air
    #_SET_FAN_SPEED PERCENT=50

    ;; put the bed and nozzle where they're a safe distance apart
    _CG28
    G1 Z20 F600

    M84 ;; turn off steppers

    UPDATE_DELAYED_GCODE ID=heat_soaker DURATION={ check_interval }


[gcode_macro CANCEL_HEAT_SOAK]
description: cancels an in-progress HEAT_SOAK cycle
gcode:
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage VALUE="'cancel'"
    UPDATE_DELAYED_GCODE ID=heat_soaker DURATION=1


[delayed_gcode heat_soaker]
; ## debug
; { action_respond_info( printer['gcode_macro HEAT_SOAK'] | tojson )}
gcode:
    {% set heat_soak = printer['gcode_macro HEAT_SOAK'] %}

    ## update total time elapsed
    {% set total_time_elapsed = heat_soak.total_time_elapsed + heat_soak.check_interval %}
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed VALUE={ total_time_elapsed }

    {% set stage = heat_soak.stage %}
    {% if stage == "heating" and printer.heater_bed.temperature >= heat_soak.target_temp %}
        {% set stage = "soaking" %}
    {% endif %}

    {% if stage == "soaking" %}
        ## update soak countdown
        {% set soak_time_remaining = [heat_soak.soak_time_remaining - heat_soak.check_interval, 0] | max %}
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE={ soak_time_remaining }

        {% if soak_time_remaining == 0 %}
            {% set stage = "done" %}
        {% endif %}
    {% endif %}

    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage VALUE="'{ stage }'"

    {% if stage in ("done", "cancel") %}

        {% if stage == "cancel" %}
            {% set stage = "done" %}
            TURN_OFF_HEATERS
            M107 ; turn off fan

            M117 { "soak cancelled after ~%.1fm" | format(total_time_elapsed / 60.0) }
        {% else %}
            M117 { "soak complete after %.1fm" | format(total_time_elapsed / 60.0) }
        {% endif %}

        ## reset all state vars, except stage, which may be queried via the api
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=target_temp         VALUE=0
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE=0
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed  VALUE=0

    {% else %}

        {% if total_time_elapsed % 90 == 0 %}
            ## output status periodically
            {% if stage == "heating" %}
                M117 { "heating -- %.1fm elapsed" | format(total_time_elapsed / 60.0) }
            {% elif stage == "soaking" %}
                M117 { "soaking -- %.1fm remaining" | format(soak_time_remaining / 60.0) }
            {% endif %}
        {% endif %}

        ## trigger ourselves again
        UPDATE_DELAYED_GCODE ID=heat_soaker DURATION={ heat_soak.check_interval }

        ## dwell for 1ms to prevent from going idle
        G4 P1

    {% endif %}


    
[gcode_macro SERVICE_POSITION]
gcode:
    _CG28
    G0 Z115 F3600
    G0 X80 Y2 F4000
      
    
[gcode_macro TEST_SPEED]
gcode:
    # Speed
    {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
    # Iterations
    {% set iterations = params.ITERATIONS|default(5)|int %}
    # Acceleration
    {% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    # Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
    {% set bound = params.BOUND|default(20)|int %}
    # Size for small pattern box
    {% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
    
    # Large pattern
    # Max positions, inset by BOUND
    {% set x_min = printer.toolhead.axis_minimum.x + bound %}
    {% set x_max = printer.toolhead.axis_maximum.x - bound %}
    {% set y_min = printer.toolhead.axis_minimum.y + bound %}
    {% set y_max = printer.toolhead.axis_maximum.y - bound %}
    
    # Small pattern at center
    # Find X/Y center point
    {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
    {% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
    
    # Set small pattern box around center point
    {% set x_center_min = x_center - (smallpatternsize/2) %}
    {% set x_center_max = x_center + (smallpatternsize/2) %}
    {% set y_center_min = y_center - (smallpatternsize/2) %}
    {% set y_center_max = y_center + (smallpatternsize/2) %}
    
    # Save current gcode state (absolute/relative, etc)
    SAVE_GCODE_STATE NAME=TEST_SPEED
    
    # Output parameters to g-code terminal
    { action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
    
    # Absolute positioning
    G90
    
    # Set new limits
    SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
    
    # Home and get position for comparison later:
    _CG28
    # QGL if not already QGLd (only if QGL section exists in config)
    {% if printer.configfile.settings.quad_gantry_level %}
    {% if printer.quad_gantry_level.applied == False %}
    QUAD_GANTRY_LEVEL
    G28 Z
    {% endif %}
    {% endif %}
    G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F{30*60}
    G4 P1000
    GET_POSITION
    
    # Go to starting position
    G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}
    
    {% for i in range(iterations) %}
    # Large pattern
    # Diagonals
    G0 X{x_min} Y{y_min} F{speed*60}
    G0 X{x_max} Y{y_max} F{speed*60}
    G0 X{x_min} Y{y_min} F{speed*60}
    G0 X{x_max} Y{y_min} F{speed*60}
    G0 X{x_min} Y{y_max} F{speed*60}
    G0 X{x_max} Y{y_min} F{speed*60}
    
    # Box
    G0 X{x_min} Y{y_min} F{speed*60}
    G0 X{x_min} Y{y_max} F{speed*60}
    G0 X{x_max} Y{y_max} F{speed*60}
    G0 X{x_max} Y{y_min} F{speed*60}
    
    # Small pattern
    # Small diagonals
    G0 X{x_center_min} Y{y_center_min} F{speed*60}
    G0 X{x_center_max} Y{y_center_max} F{speed*60}
    G0 X{x_center_min} Y{y_center_min} F{speed*60}
    G0 X{x_center_max} Y{y_center_min} F{speed*60}
    G0 X{x_center_min} Y{y_center_max} F{speed*60}
    G0 X{x_center_max} Y{y_center_min} F{speed*60}
    
    # Small box
    G0 X{x_center_min} Y{y_center_min} F{speed*60}
    G0 X{x_center_min} Y{y_center_max} F{speed*60}
    G0 X{x_center_max} Y{y_center_max} F{speed*60}
    G0 X{x_center_max} Y{y_center_min} F{speed*60}
    {% endfor %}
    
    # Restore max speed/accel/accel_to_decel to their configured values
    SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
    
    # Re-home and get position again for comparison:
    G28
    # Go to XY home positions (in case your homing override leaves it elsewhere)
    G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F{30*60}
    G4 P1000
    GET_POSITION
    
    # Restore previous gcode state (absolute/relative, etc)
    RESTORE_GCODE_STATE NAME=TEST_SPEED
    
    
    


##   Sensor Types
##   "Trianglelab NTC100K B3950" (Beta 3950 used in LDO kits)
##   "EPCOS 100K B57560G104F"
##   "ATC Semitec 104GT-2"
##   "Generic 3950"
##   "Honeywell 100K 135-104LAG-J01"
##   "NTC 100K MGB18-104F39050L32" (Keenovo Heater Pad)
##   "AD595"
##   "PT100 INA826"
##   "PT1000"
##   For more information: https://www.klipper3d.org/Config_Reference.html#temperature_sensor

## Footnote about Beta 3950:
## https://github.com/Klipper3d/klipper/issues/4054
## https://github.com/Klipper3d/klipper/pull/4859

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [heater_bed]
#*# control = pid
#*# pid_kp = 50.816
#*# pid_ki = 2.732
#*# pid_kd = 236.292
#*#
#*# [extruder]
#*# control = pid
#*# pid_kp = 21.544
#*# pid_ki = 1.033
#*# pid_kd = 112.297
#*#
#*# [stepper_z]
#*# position_endstop = -0.170
#*#
#*# [input_shaper]
#*#
#*# [bed_mesh default]
#*# version = 1
#*# points =
#*# 	-0.046406, -0.033594, -0.000312
#*# 	-0.075312, -0.022031, 0.003438
#*# 	-0.118594, -0.098281, -0.079844
#*# x_count = 3
#*# y_count = 3
#*# mesh_x_pps = 1
#*# mesh_y_pps = 1
#*# algo = bicubic
#*# tension = 0.5
#*# min_x = 20.0
#*# max_x = 100.0
#*# min_y = 20.0
#*# max_y = 100.0
